// <auto-generated />
using System;
using DataAccess.Concrete.EntityFramework.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(AlalimContext))]
    [Migration("20231222161757_v2")]
    partial class v2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Concrete.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("DetailedAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("AddressId");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            AddressId = 1,
                            CityId = 1,
                            DetailedAddress = "Yeni mahale abc apartman no: 45 daire:6",
                            District = "Beşiktaş",
                            PhoneNumber = "0152455252",
                            Street = "Abc sokak",
                            Title = "Ev Adresi",
                            UserId = 1
                        },
                        new
                        {
                            AddressId = 2,
                            CityId = 2,
                            DetailedAddress = "Yeni mahale abc apartman no: 45 daire:6",
                            District = "Mamak",
                            PhoneNumber = "0152455252",
                            Street = "Abc sokak",
                            Title = "İş Adresi",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageUrl = "/img/c3.jpg",
                            Name = "Smart Phone",
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            ImageUrl = "/img/c2.jpg",
                            Name = "Apple",
                            Status = true
                        },
                        new
                        {
                            Id = 3,
                            ImageUrl = "/img/c1.jpg",
                            Name = "Galaxy Family",
                            Status = true
                        });
                });

            modelBuilder.Entity("Entities.Concrete.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("CityId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            CityId = 1,
                            Name = "İstanbul",
                            Status = true
                        },
                        new
                        {
                            CityId = 2,
                            Name = "Ankara",
                            Status = true
                        },
                        new
                        {
                            CityId = 3,
                            Name = "Bursa",
                            Status = true
                        },
                        new
                        {
                            CityId = 4,
                            Name = "Balıkesir",
                            Status = true
                        },
                        new
                        {
                            CityId = 5,
                            Name = "Çanakale",
                            Status = true
                        },
                        new
                        {
                            CityId = 6,
                            Name = "Antalya",
                            Status = true
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Red",
                            Status = true
                        },
                        new
                        {
                            Id = 2,
                            Name = "Blue",
                            Status = true
                        },
                        new
                        {
                            Id = 3,
                            Name = "Yellow",
                            Status = true
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Customer"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "okan@gmail.com",
                            FirstName = "Okan",
                            IsActive = true,
                            LastName = "Kara",
                            Password = "123456",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "ceyda@gmail.com",
                            FirstName = "Ceyda",
                            IsActive = true,
                            LastName = "Yıldırım",
                            Password = "123456",
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<bool>("Cancel")
                        .HasColumnType("bit");

                    b.Property<bool>("GiftWrap")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("Shipped")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Entities.Concrete.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ColorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowCase")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ColorId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            ColorId = 1,
                            Description = "256 GB",
                            ImageUrl = "/img/1.jpg",
                            Price = 699m,
                            ProductName = "Iphone 11 Pro Max",
                            ShowCase = true,
                            Status = true,
                            Summary = "Silver"
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 2,
                            ColorId = 2,
                            Description = "256 GB",
                            ImageUrl = "/img/2.jpg",
                            Price = 799m,
                            ProductName = "Iphone 12 Pro Max",
                            ShowCase = true,
                            Status = true,
                            Summary = "Black"
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 3,
                            ColorId = 3,
                            Description = "256 GB",
                            ImageUrl = "/img/3.jpg",
                            Price = 899m,
                            ProductName = "Iphone 13 Pro Max",
                            ShowCase = true,
                            Status = true,
                            Summary = "White"
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 1,
                            ColorId = 1,
                            Description = "256 GB",
                            ImageUrl = "/img/4.jpg",
                            Price = 999m,
                            ProductName = "Iphone 14 Pro Max",
                            ShowCase = true,
                            Status = true,
                            Summary = "White"
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 2,
                            ColorId = 2,
                            Description = "256 GB",
                            ImageUrl = "/img/5.jpg",
                            Price = 1099m,
                            ProductName = "Iphone 15 Pro Max",
                            ShowCase = true,
                            Status = true,
                            Summary = "White"
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 3,
                            ColorId = 3,
                            Description = "256 GB",
                            ImageUrl = "/img/6.jpg",
                            Price = 1199m,
                            ProductName = "Iphone 16 Pro Max",
                            ShowCase = true,
                            Status = true,
                            Summary = "White"
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 1,
                            ColorId = 1,
                            Description = "256 GB",
                            ImageUrl = "/img/7.jpg",
                            Price = 1299m,
                            ProductName = "Iphone 17 Pro Max",
                            ShowCase = true,
                            Status = true,
                            Summary = "White"
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 2,
                            ColorId = 2,
                            Description = "256 GB",
                            ImageUrl = "/img/8.jpg",
                            Price = 1399m,
                            ProductName = "Iphone 18 Pro Max",
                            ShowCase = true,
                            Status = true,
                            Summary = "White"
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 3,
                            ColorId = 3,
                            Description = "256 GB",
                            ImageUrl = "/img/9.jpg",
                            Price = 1499m,
                            ProductName = "Iphone 19 Pro Max",
                            ShowCase = true,
                            Status = true,
                            Summary = "White"
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 3,
                            ColorId = 1,
                            Description = "256 GB",
                            ImageUrl = "/img/10.jpg",
                            Price = 1599m,
                            ProductName = "Iphone 20 Pro Max",
                            ShowCase = true,
                            Status = true,
                            Summary = "White"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.ProductOrder", b =>
                {
                    b.Property<int?>("OrderID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductOrders");
                });

            modelBuilder.Entity("Entities.Concrete.Address", b =>
                {
                    b.HasOne("Entities.Concrete.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId");

                    b.HasOne("Entities.Concrete.Identity.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Concrete.Identity.User", b =>
                {
                    b.HasOne("Entities.Concrete.Identity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Entities.Concrete.Order", b =>
                {
                    b.HasOne("Entities.Concrete.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Entities.Concrete.Identity.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Concrete.Product", b =>
                {
                    b.HasOne("Entities.Concrete.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Entities.Concrete.Color", "Color")
                        .WithMany("Products")
                        .HasForeignKey("ColorId");

                    b.Navigation("Category");

                    b.Navigation("Color");
                });

            modelBuilder.Entity("Entities.Concrete.ProductOrder", b =>
                {
                    b.HasOne("Entities.Concrete.Order", "Order")
                        .WithMany("ProductOrders")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.Product", "Product")
                        .WithMany("ProductOrders")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entities.Concrete.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Entities.Concrete.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Entities.Concrete.Color", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Entities.Concrete.Identity.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Entities.Concrete.Identity.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Entities.Concrete.Order", b =>
                {
                    b.Navigation("ProductOrders");
                });

            modelBuilder.Entity("Entities.Concrete.Product", b =>
                {
                    b.Navigation("ProductOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
